{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1. Load the Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/saraswathy/anaconda3/lib/python3.6/site-packages/h5py/__init__.py:36: FutureWarning: Conversion of the second argument of issubdtype from `float` to `np.floating` is deprecated. In future, it will be treated as `np.float64 == np.dtype(float).type`.\n",
      "  from ._conv import register_converters as _register_converters\n",
      "Using TensorFlow backend.\n",
      "/Users/saraswathy/anaconda3/lib/python3.6/importlib/_bootstrap.py:219: RuntimeWarning: compiletime version 3.5 of module 'tensorflow.python.framework.fast_tensor_util' does not match runtime version 3.6\n",
      "  return f(*args, **kwds)\n"
     ]
    }
   ],
   "source": [
    "from keras.models import Sequential\n",
    "from keras.layers import Dense\n",
    "import numpy\n",
    "\n",
    "#fix random seed for reproducibility\n",
    "numpy.random.seed(7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[  6.   , 148.   ,  72.   , ...,  33.6  ,   0.627,  50.   ],\n",
       "       [  1.   ,  85.   ,  66.   , ...,  26.6  ,   0.351,  31.   ],\n",
       "       [  8.   , 183.   ,  64.   , ...,  23.3  ,   0.672,  32.   ],\n",
       "       ...,\n",
       "       [  5.   , 121.   ,  72.   , ...,  26.2  ,   0.245,  30.   ],\n",
       "       [  1.   , 126.   ,  60.   , ...,  30.1  ,   0.349,  47.   ],\n",
       "       [  1.   ,  93.   ,  70.   , ...,  30.4  ,   0.315,  23.   ]])"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# load pima indians dataset\n",
    "dataset = numpy.loadtxt(\"pima-indians-diabetes.csv\", delimiter=\",\")\n",
    "\n",
    "# split into input (X) and output (Y) variables\n",
    "X = dataset[:,0:8]\n",
    "Y = dataset[:,8]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2. Define model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create model\n",
    "model = Sequential()\n",
    "model.add(Dense(12, input_dim=8, activation='relu'))\n",
    "model.add(Dense(8, activation='relu'))\n",
    "model.add(Dense(1, activation='sigmoid'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3. Compile model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Compile model\n",
    "model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 4. Fit model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/150\n",
      " - 0s - loss: 0.4391 - acc: 0.8060\n",
      "Epoch 2/150\n",
      " - 0s - loss: 0.4479 - acc: 0.8008\n",
      "Epoch 3/150\n",
      " - 0s - loss: 0.4265 - acc: 0.8112\n",
      "Epoch 4/150\n",
      " - 0s - loss: 0.4405 - acc: 0.7917\n",
      "Epoch 5/150\n",
      " - 0s - loss: 0.4487 - acc: 0.7852\n",
      "Epoch 6/150\n",
      " - 0s - loss: 0.4358 - acc: 0.7982\n",
      "Epoch 7/150\n",
      " - 0s - loss: 0.4317 - acc: 0.7943\n",
      "Epoch 8/150\n",
      " - 0s - loss: 0.4326 - acc: 0.7904\n",
      "Epoch 9/150\n",
      " - 0s - loss: 0.4323 - acc: 0.8021\n",
      "Epoch 10/150\n",
      " - 0s - loss: 0.4308 - acc: 0.7878\n",
      "Epoch 11/150\n",
      " - 0s - loss: 0.4353 - acc: 0.7982\n",
      "Epoch 12/150\n",
      " - 0s - loss: 0.4436 - acc: 0.7878\n",
      "Epoch 13/150\n",
      " - 0s - loss: 0.4327 - acc: 0.7904\n",
      "Epoch 14/150\n",
      " - 0s - loss: 0.4373 - acc: 0.7904\n",
      "Epoch 15/150\n",
      " - 0s - loss: 0.4336 - acc: 0.7943\n",
      "Epoch 16/150\n",
      " - 0s - loss: 0.4341 - acc: 0.7917\n",
      "Epoch 17/150\n",
      " - 0s - loss: 0.4340 - acc: 0.8151\n",
      "Epoch 18/150\n",
      " - 0s - loss: 0.4469 - acc: 0.7812\n",
      "Epoch 19/150\n",
      " - 0s - loss: 0.4285 - acc: 0.8086\n",
      "Epoch 20/150\n",
      " - 0s - loss: 0.4223 - acc: 0.8008\n",
      "Epoch 21/150\n",
      " - 0s - loss: 0.4307 - acc: 0.7904\n",
      "Epoch 22/150\n",
      " - 0s - loss: 0.4354 - acc: 0.7812\n",
      "Epoch 23/150\n",
      " - 0s - loss: 0.4256 - acc: 0.8008\n",
      "Epoch 24/150\n",
      " - 0s - loss: 0.4335 - acc: 0.8060\n",
      "Epoch 25/150\n",
      " - 0s - loss: 0.4341 - acc: 0.8008\n",
      "Epoch 26/150\n",
      " - 0s - loss: 0.4282 - acc: 0.8060\n",
      "Epoch 27/150\n",
      " - 0s - loss: 0.4199 - acc: 0.8008\n",
      "Epoch 28/150\n",
      " - 0s - loss: 0.4455 - acc: 0.7904\n",
      "Epoch 29/150\n",
      " - 0s - loss: 0.4390 - acc: 0.7995\n",
      "Epoch 30/150\n",
      " - 0s - loss: 0.4302 - acc: 0.7865\n",
      "Epoch 31/150\n",
      " - 0s - loss: 0.4219 - acc: 0.8008\n",
      "Epoch 32/150\n",
      " - 0s - loss: 0.4289 - acc: 0.7982\n",
      "Epoch 33/150\n",
      " - 0s - loss: 0.4312 - acc: 0.7995\n",
      "Epoch 34/150\n",
      " - 0s - loss: 0.4314 - acc: 0.8008\n",
      "Epoch 35/150\n",
      " - 0s - loss: 0.4299 - acc: 0.8099\n",
      "Epoch 36/150\n",
      " - 0s - loss: 0.4176 - acc: 0.8060\n",
      "Epoch 37/150\n",
      " - 0s - loss: 0.4212 - acc: 0.8047\n",
      "Epoch 38/150\n",
      " - 0s - loss: 0.4297 - acc: 0.7930\n",
      "Epoch 39/150\n",
      " - 0s - loss: 0.4259 - acc: 0.7969\n",
      "Epoch 40/150\n",
      " - 0s - loss: 0.4272 - acc: 0.8125\n",
      "Epoch 41/150\n",
      " - 0s - loss: 0.4298 - acc: 0.7930\n",
      "Epoch 42/150\n",
      " - 0s - loss: 0.4402 - acc: 0.7995\n",
      "Epoch 43/150\n",
      " - 0s - loss: 0.4238 - acc: 0.7982\n",
      "Epoch 44/150\n",
      " - 0s - loss: 0.4212 - acc: 0.8034\n",
      "Epoch 45/150\n",
      " - 0s - loss: 0.4322 - acc: 0.8034\n",
      "Epoch 46/150\n",
      " - 0s - loss: 0.4264 - acc: 0.7943\n",
      "Epoch 47/150\n",
      " - 0s - loss: 0.4187 - acc: 0.7982\n",
      "Epoch 48/150\n",
      " - 0s - loss: 0.4216 - acc: 0.8112\n",
      "Epoch 49/150\n",
      " - 0s - loss: 0.4255 - acc: 0.8151\n",
      "Epoch 50/150\n",
      " - 0s - loss: 0.4206 - acc: 0.7956\n",
      "Epoch 51/150\n",
      " - 0s - loss: 0.4189 - acc: 0.8086\n",
      "Epoch 52/150\n",
      " - 0s - loss: 0.4192 - acc: 0.8086\n",
      "Epoch 53/150\n",
      " - 0s - loss: 0.4215 - acc: 0.8034\n",
      "Epoch 54/150\n",
      " - 0s - loss: 0.4189 - acc: 0.7956\n",
      "Epoch 55/150\n",
      " - 0s - loss: 0.4274 - acc: 0.8086\n",
      "Epoch 56/150\n",
      " - 0s - loss: 0.4161 - acc: 0.8060\n",
      "Epoch 57/150\n",
      " - 0s - loss: 0.4163 - acc: 0.8151\n",
      "Epoch 58/150\n",
      " - 0s - loss: 0.4259 - acc: 0.7930\n",
      "Epoch 59/150\n",
      " - 0s - loss: 0.4262 - acc: 0.8099\n",
      "Epoch 60/150\n",
      " - 0s - loss: 0.4249 - acc: 0.7995\n",
      "Epoch 61/150\n",
      " - 0s - loss: 0.4267 - acc: 0.8060\n",
      "Epoch 62/150\n",
      " - 0s - loss: 0.4405 - acc: 0.7930\n",
      "Epoch 63/150\n",
      " - 0s - loss: 0.4288 - acc: 0.8021\n",
      "Epoch 64/150\n",
      " - 0s - loss: 0.4246 - acc: 0.8008\n",
      "Epoch 65/150\n",
      " - 0s - loss: 0.4278 - acc: 0.7969\n",
      "Epoch 66/150\n",
      " - 0s - loss: 0.4219 - acc: 0.7969\n",
      "Epoch 67/150\n",
      " - 0s - loss: 0.4474 - acc: 0.7904\n",
      "Epoch 68/150\n",
      " - 0s - loss: 0.4196 - acc: 0.8021\n",
      "Epoch 69/150\n",
      " - 0s - loss: 0.4388 - acc: 0.7917\n",
      "Epoch 70/150\n",
      " - 0s - loss: 0.4353 - acc: 0.7891\n",
      "Epoch 71/150\n",
      " - 0s - loss: 0.4191 - acc: 0.8021\n",
      "Epoch 72/150\n",
      " - 0s - loss: 0.4201 - acc: 0.7930\n",
      "Epoch 73/150\n",
      " - 0s - loss: 0.4207 - acc: 0.8021\n",
      "Epoch 74/150\n",
      " - 0s - loss: 0.4188 - acc: 0.8047\n",
      "Epoch 75/150\n",
      " - 0s - loss: 0.4343 - acc: 0.7956\n",
      "Epoch 76/150\n",
      " - 0s - loss: 0.4235 - acc: 0.7982\n",
      "Epoch 77/150\n",
      " - 0s - loss: 0.4187 - acc: 0.8047\n",
      "Epoch 78/150\n",
      " - 0s - loss: 0.4256 - acc: 0.8086\n",
      "Epoch 79/150\n",
      " - 0s - loss: 0.4255 - acc: 0.7891\n",
      "Epoch 80/150\n",
      " - 0s - loss: 0.4199 - acc: 0.7995\n",
      "Epoch 81/150\n",
      " - 0s - loss: 0.4221 - acc: 0.8034\n",
      "Epoch 82/150\n",
      " - 0s - loss: 0.4307 - acc: 0.7943\n",
      "Epoch 83/150\n",
      " - 0s - loss: 0.4311 - acc: 0.7891\n",
      "Epoch 84/150\n",
      " - 0s - loss: 0.4242 - acc: 0.8034\n",
      "Epoch 85/150\n",
      " - 0s - loss: 0.4252 - acc: 0.8008\n",
      "Epoch 86/150\n",
      " - 0s - loss: 0.4240 - acc: 0.7969\n",
      "Epoch 87/150\n",
      " - 0s - loss: 0.4222 - acc: 0.8138\n",
      "Epoch 88/150\n",
      " - 0s - loss: 0.4183 - acc: 0.8047\n",
      "Epoch 89/150\n",
      " - 0s - loss: 0.4219 - acc: 0.7995\n",
      "Epoch 90/150\n",
      " - 0s - loss: 0.4154 - acc: 0.8060\n",
      "Epoch 91/150\n",
      " - 0s - loss: 0.4219 - acc: 0.8008\n",
      "Epoch 92/150\n",
      " - 0s - loss: 0.4210 - acc: 0.7956\n",
      "Epoch 93/150\n",
      " - 0s - loss: 0.4164 - acc: 0.8060\n",
      "Epoch 94/150\n",
      " - 0s - loss: 0.4227 - acc: 0.7982\n",
      "Epoch 95/150\n",
      " - 0s - loss: 0.4163 - acc: 0.8060\n",
      "Epoch 96/150\n",
      " - 0s - loss: 0.4132 - acc: 0.8099\n",
      "Epoch 97/150\n",
      " - 0s - loss: 0.4293 - acc: 0.7995\n",
      "Epoch 98/150\n",
      " - 0s - loss: 0.4155 - acc: 0.8034\n",
      "Epoch 99/150\n",
      " - 0s - loss: 0.4224 - acc: 0.8073\n",
      "Epoch 100/150\n",
      " - 0s - loss: 0.4180 - acc: 0.7956\n",
      "Epoch 101/150\n",
      " - 0s - loss: 0.4100 - acc: 0.7943\n",
      "Epoch 102/150\n",
      " - 0s - loss: 0.4246 - acc: 0.8034\n",
      "Epoch 103/150\n",
      " - 0s - loss: 0.4240 - acc: 0.7982\n",
      "Epoch 104/150\n",
      " - 0s - loss: 0.4220 - acc: 0.7904\n",
      "Epoch 105/150\n",
      " - 0s - loss: 0.4148 - acc: 0.8008\n",
      "Epoch 106/150\n",
      " - 0s - loss: 0.4262 - acc: 0.8034\n",
      "Epoch 107/150\n",
      " - 0s - loss: 0.4225 - acc: 0.8060\n",
      "Epoch 108/150\n",
      " - 0s - loss: 0.4125 - acc: 0.8073\n",
      "Epoch 109/150\n",
      " - 0s - loss: 0.4039 - acc: 0.8125\n",
      "Epoch 110/150\n",
      " - 0s - loss: 0.4412 - acc: 0.7904\n",
      "Epoch 111/150\n",
      " - 0s - loss: 0.4209 - acc: 0.8021\n",
      "Epoch 112/150\n",
      " - 0s - loss: 0.4200 - acc: 0.8008\n",
      "Epoch 113/150\n",
      " - 0s - loss: 0.4137 - acc: 0.8034\n",
      "Epoch 114/150\n",
      " - 0s - loss: 0.4182 - acc: 0.8021\n",
      "Epoch 115/150\n",
      " - 0s - loss: 0.4100 - acc: 0.8047\n",
      "Epoch 116/150\n",
      " - 0s - loss: 0.4278 - acc: 0.7904\n",
      "Epoch 117/150\n",
      " - 0s - loss: 0.4194 - acc: 0.7995\n",
      "Epoch 118/150\n",
      " - 0s - loss: 0.4224 - acc: 0.7982\n",
      "Epoch 119/150\n",
      " - 0s - loss: 0.4177 - acc: 0.7891\n",
      "Epoch 120/150\n",
      " - 0s - loss: 0.4174 - acc: 0.7865\n",
      "Epoch 121/150\n",
      " - 0s - loss: 0.4302 - acc: 0.7982\n",
      "Epoch 122/150\n",
      " - 0s - loss: 0.4105 - acc: 0.8047\n",
      "Epoch 123/150\n",
      " - 0s - loss: 0.4184 - acc: 0.8060\n",
      "Epoch 124/150\n",
      " - 0s - loss: 0.4073 - acc: 0.8060\n",
      "Epoch 125/150\n",
      " - 0s - loss: 0.4199 - acc: 0.7943\n",
      "Epoch 126/150\n",
      " - 0s - loss: 0.4206 - acc: 0.8034\n",
      "Epoch 127/150\n",
      " - 0s - loss: 0.4148 - acc: 0.8060\n",
      "Epoch 128/150\n",
      " - 0s - loss: 0.4380 - acc: 0.7917\n",
      "Epoch 129/150\n",
      " - 0s - loss: 0.4120 - acc: 0.8112\n",
      "Epoch 130/150\n",
      " - 0s - loss: 0.4128 - acc: 0.8008\n",
      "Epoch 131/150\n",
      " - 0s - loss: 0.4265 - acc: 0.8008\n",
      "Epoch 132/150\n",
      " - 0s - loss: 0.4186 - acc: 0.7943\n",
      "Epoch 133/150\n",
      " - 0s - loss: 0.4112 - acc: 0.8008\n",
      "Epoch 134/150\n",
      " - 0s - loss: 0.4133 - acc: 0.8021\n",
      "Epoch 135/150\n",
      " - 0s - loss: 0.4167 - acc: 0.8086\n",
      "Epoch 136/150\n",
      " - 0s - loss: 0.4230 - acc: 0.7891\n",
      "Epoch 137/150\n",
      " - 0s - loss: 0.4159 - acc: 0.8047\n",
      "Epoch 138/150\n",
      " - 0s - loss: 0.4130 - acc: 0.7878\n",
      "Epoch 139/150\n",
      " - 0s - loss: 0.4093 - acc: 0.8112\n",
      "Epoch 140/150\n",
      " - 0s - loss: 0.4148 - acc: 0.7969\n",
      "Epoch 141/150\n",
      " - 0s - loss: 0.4075 - acc: 0.8073\n",
      "Epoch 142/150\n",
      " - 0s - loss: 0.4138 - acc: 0.8060\n",
      "Epoch 143/150\n",
      " - 0s - loss: 0.4056 - acc: 0.8138\n",
      "Epoch 144/150\n",
      " - 0s - loss: 0.4129 - acc: 0.7917\n",
      "Epoch 145/150\n",
      " - 0s - loss: 0.4155 - acc: 0.7917\n",
      "Epoch 146/150\n",
      " - 0s - loss: 0.4144 - acc: 0.8138\n",
      "Epoch 147/150\n",
      " - 0s - loss: 0.4218 - acc: 0.7891\n",
      "Epoch 148/150\n",
      " - 0s - loss: 0.4053 - acc: 0.8138\n",
      "Epoch 149/150\n",
      " - 0s - loss: 0.4133 - acc: 0.8034\n",
      "Epoch 150/150\n",
      " - 0s - loss: 0.4221 - acc: 0.8073\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0xb1612e860>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Fit the model\n",
    "model.fit(X, Y, epochs=150, batch_size=10, verbose = 2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 5. Evaluate model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "768/768 [==============================] - 0s 102us/step\n",
      "\n",
      "acc: 77.99%\n"
     ]
    }
   ],
   "source": [
    "# evaluate the model\n",
    "scores = model.evaluate(X, Y)\n",
    "print(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 6. Predict using model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n"
     ]
    }
   ],
   "source": [
    "# calculate predictions\n",
    "predictions = model.predict(X)\n",
    "# round predictions\n",
    "rounded = [round(x[0]) for x in predictions]\n",
    "print(rounded)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
